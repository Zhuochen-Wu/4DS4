/*
 * Copyright (c) 2015, Freescale Semiconductor, Inc.
 * Copyright 2016-2017 NXP
 * All rights reserved.
 *
 * SPDX-License-Identifier: BSD-3-Clause
 */

/*#define LEFT_BIT (1 << 0)
#define RIGHT_BIT (1 << 1)
#define UP_BIT (1 << 2)
#define DOWN_BIT (1 << 3)

/* FreeRTOS kernel includes. */
#include "FreeRTOS.h"
#include "task.h"
#include "queue.h"
#include "timers.h"
#include "semphr.h"
#include "event_groups.h"

/* Freescale includes. */
#include "fsl_device_registers.h"
#include "fsl_debug_console.h"
#include "pin_mux.h"
#include "clock_config.h"
#include "board.h"





SemaphoreHandle_t sem_left, sem_right, sem_up, sem_down;

void consumer_event(void* pvParameters)
{
    while(1)
    {
        if(xSemaphoreTake(sem_left, portMAX_DELAY) == pdTRUE)
        {
            PRINTF("Left\r\n");
        }
        if(xSemaphoreTake(sem_right, portMAX_DELAY) == pdTRUE)
        {
            PRINTF("Right\r\n");
        }
        if(xSemaphoreTake(sem_up, portMAX_DELAY) == pdTRUE)
        {
            PRINTF("Up\r\n");
        }
        if(xSemaphoreTake(sem_down, portMAX_DELAY) == pdTRUE)
{
PRINTF("Down\r\n");
}
}
}

void producer_event(void* pvParameters)
{
char c;
while(1)
{
scanf("%c", &c);
switch(c)
{
case 'a':
xSemaphoreGive(sem_left);
break;
case 's':
xSemaphoreGive(sem_down);
break;
case 'd':
xSemaphoreGive(sem_right);
break;
case 'w':
xSemaphoreGive(sem_up);
break;
}
}
}

int main(void)
{
BaseType_t status;
/* Init board hardware. */
BOARD_InitBootPins();
BOARD_InitBootClocks();
BOARD_InitDebugConsole();
sem_left = xSemaphoreCreateCounting(10, 0);
sem_right = xSemaphoreCreateCounting(10, 0);
sem_up = xSemaphoreCreateCounting(10, 0);
sem_down = xSemaphoreCreateCounting(10, 0);
status = xTaskCreate(producer_event, "producer", 200, NULL, 2, NULL);
if (status != pdPASS)
{
PRINTF("Task creation failed!.\r\n");
while (1);
}
status = xTaskCreate(consumer_event, "consumer", 200, NULL, 3, NULL);
if (status != pdPASS)
{
PRINTF("Task creation failed!.\r\n");
while (1);
}
vTaskStartScheduler();
while (1)
{}
}
