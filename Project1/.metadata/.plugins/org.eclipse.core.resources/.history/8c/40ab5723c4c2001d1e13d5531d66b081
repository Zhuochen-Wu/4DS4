#include "LED_Component.h"

QueueHandle_t led_queue;

void setupLEDComponent()
{
	setupLEDPins();

	setupLEDs();

    /*************** LED Task ***************/
	//Create LED Queue
	led_queue = xQueueCreate(1, sizeof(int));

	//Create LED Task
	if (xTaskCreate(ledTask, "LED task", 128, (void*)led_queue, 2, NULL) != pdPASS)
	{
		PRINTF("LED Task creation failed!.\r\n");
		while (1);
	}

}

void setupLEDPins()
{
	//Configure LED pins
	/* Port D Clock Gate Control: Clock enabled */
	CLOCK_EnableClock(kCLOCK_PortD);
	/* Port C Clock Gate Control: Clock enabled */
	CLOCK_EnableClock(kCLOCK_PortC);


    /* PORTD1 is configured as FlexTimerModule (PWM) */
    PORT_SetPinMux(PORTD, 1u, kPORT_MuxAlt4);
	/* PORTC8 is configured as FlexTimerModule (PWM) */
	PORT_SetPinMux(PORTC, 8U, kPORT_MuxAlt3);
	/* PORTC9 is configured as FlexTimerModule (PWM) */
	PORT_SetPinMux(PORTC, 9U, kPORT_MuxAlt3);
}

void setupLEDs()
{
	//Initialize PWM for the LEDs
	/*ftm_config_t ftmInfo;
	ftm_chnl_pwm_signal_param_t ftmParam[3];

	ftmParam[0].chnlNumber = kFTM_Chnl_1;
	ftmParam[1].chnlNumber = kFTM_Chnl_4;
	ftmParam[2].chnlNumber = kFTM_Chnl_5;

	for (int i=0; i<3; i++){
		ftmParam[i].level = kFTM_HighTrue;
		ftmParam[i].dutyCyclePercent = 0;
		ftmParam[i].firstEdgeDelayPercent = 0U;
		ftmParam[i].enableComplementary = false;
		ftmParam[i].enableDeadtime = false;
	}

	FTM_GetDefaultConfig(&ftmInfo);

	FTM_Init(FTM3, &ftmInfo);
	FTM_SetupPwm(FTM3, ftmParam, 3U, kFTM_EdgeAlignedPwm, 5000U, CLOCK_GetFreq(kCLOCK_BusClk));
	FTM_StartTimer(FTM3, kFTM_SystemClock);*/
	//Initialize PWM for the LEDs
	ftm_config_t ftmInfo;
	ftm_chnl_pwm_signal_param_t ftmParam_red;
	ftm_chnl_pwm_signal_param_t ftmParam_green;
	ftm_chnl_pwm_signal_param_t ftmParam_blue;

	ftmParam_red.chnlNumber = FTM_RED_CHANNEL;
	ftmParam_red.level = kFTM_HighTrue;
	ftmParam_red.dutyCyclePercent = 0;
	ftmParam_red.firstEdgeDelayPercent = 0U;
	ftmParam_red.enableComplementary = false;
	ftmParam_red.enableDeadtime = false;

	ftmParam_green.chnlNumber = FTM_GREEN_CHANNEL;
	ftmParam_green.level = kFTM_HighTrue;
	ftmParam_green.dutyCyclePercent = 0;
	ftmParam_green.firstEdgeDelayPercent = 0U;
	ftmParam_green.enableComplementary = false;
	ftmParam_green.enableDeadtime = false;

	ftmParam_blue.chnlNumber = FTM_BLUE_CHANNEL;
	ftmParam_blue.level = kFTM_HighTrue;
	ftmParam_blue.dutyCyclePercent = 0;
	ftmParam_blue.firstEdgeDelayPercent = 0U;
	ftmParam_blue.enableComplementary = false;
	ftmParam_blue.enableDeadtime = false;

	FTM_GetDefaultConfig(&ftmInfo);

	FTM_Init(FTM_LED, &ftmInfo);
	FTM_SetupPwm(FTM_LED, &ftmParam_red, 1U, kFTM_EdgeAlignedPwm, 5000U, CLOCK_GetFreq(kCLOCK_BusClk));
	FTM_SetupPwm(FTM_LED, &ftmParam_green, 9U, kFTM_EdgeAlignedPwm, 5000U, CLOCK_GetFreq(kCLOCK_BusClk));
	FTM_SetupPwm(FTM_LED, &ftmParam_blue, 8U, kFTM_EdgeAlignedPwm, 5000U, CLOCK_GetFreq(kCLOCK_BusClk));

	FTM_StartTimer(FTM_LED, kFTM_SystemClock);
}

void ledTask(void* pvParameters)
{
	//LED task implementation
	/*int speed=0, colour;
	while (1){
		PRINTF("LED UPDATE\r\n");

		switch(speed){
			case 0:
				colour = COLOUR_SLOW;
				break;
			case 1:
				colour = COLOUR_MEDIUM;
				break;
			case 2:
				colour = COLOUR_FAST;
				break;
			default:
				colour = COLOUR_SLOW;
		}

		uint8_t blue  = ((float) (colour & 0x0000FF))        / 0xFF * 100;
		uint8_t green = ((float)((colour & 0x00FF00) >> 8))  / 0xFF * 100;
		uint8_t red   = ((float)((colour & 0xFF0000) >> 16)) / 0xFF * 100;

		// TODO: Push this to the terminal UART queue for being printed out
//		PRINTF("blue\t- %d%%\r\n", blue);
//		PRINTF("green\t- %d%%\r\n", green);
//		PRINTF("red\t- %d%%\r\n", red);

		FTM_UpdatePwmDutycycle(FTM3, kFTM_Chnl_1, kFTM_EdgeAlignedPwm, red);
		FTM_UpdatePwmDutycycle(FTM3, kFTM_Chnl_4, kFTM_EdgeAlignedPwm, blue);
		FTM_UpdatePwmDutycycle(FTM3, kFTM_Chnl_5, kFTM_EdgeAlignedPwm, green);

		FTM_SetSoftwareTrigger(FTM3, true);

		xQueueReceive(led_queue, (void *) (&speed), portMAX_DELAY); */
	int led_color;
	int led_color_old;
//	char *send_str;
	//LED task implementation
	while (1)
	{
		xQueueReceive(led_queue, &led_color, portMAX_DELAY);
		if (led_color != led_color_old)
		{
			led_color_old = led_color;
//			send_str = (char *)malloc(sizeof(char) * 20);

			switch (led_color)
			{
			case 1:
				FTM_UpdatePwmDutycycle(FTM_LED, FTM_RED_CHANNEL, kFTM_EdgeAlignedPwm, 0);
				FTM_UpdatePwmDutycycle(FTM_LED, FTM_GREEN_CHANNEL, kFTM_EdgeAlignedPwm, 0);
				FTM_UpdatePwmDutycycle(FTM_LED, FTM_BLUE_CHANNEL, kFTM_EdgeAlignedPwm, 100);
				FTM_SetSoftwareTrigger(FTM_LED, true);
//				send_str = "LED: Blue\r\n";

				break;
			case 2:
				FTM_UpdatePwmDutycycle(FTM_LED, FTM_RED_CHANNEL, kFTM_EdgeAlignedPwm, 0);
				FTM_UpdatePwmDutycycle(FTM_LED, FTM_GREEN_CHANNEL, kFTM_EdgeAlignedPwm, 100);
				FTM_UpdatePwmDutycycle(FTM_LED, FTM_BLUE_CHANNEL, kFTM_EdgeAlignedPwm, 0);
				FTM_SetSoftwareTrigger(FTM_LED, true);
//				send_str = "LED: Green\r\n";
				break;
			case 3:
				FTM_UpdatePwmDutycycle(FTM_LED, FTM_RED_CHANNEL, kFTM_EdgeAlignedPwm, 100);
				FTM_UpdatePwmDutycycle(FTM_LED, FTM_GREEN_CHANNEL, kFTM_EdgeAlignedPwm, 0);
				FTM_UpdatePwmDutycycle(FTM_LED, FTM_BLUE_CHANNEL, kFTM_EdgeAlignedPwm, 0);
				FTM_SetSoftwareTrigger(FTM_LED, true);
//				send_str = "LED: Red\r\n";
				break;
			default:
				FTM_UpdatePwmDutycycle(FTM_LED, FTM_RED_CHANNEL, kFTM_EdgeAlignedPwm, 100);
				FTM_UpdatePwmDutycycle(FTM_LED, FTM_GREEN_CHANNEL, kFTM_EdgeAlignedPwm, 100);
				FTM_UpdatePwmDutycycle(FTM_LED, FTM_BLUE_CHANNEL, kFTM_EdgeAlignedPwm, 100);
				FTM_SetSoftwareTrigger(FTM_LED, true);
//				send_str = "LED: White\r\n";
				break;
			}
//			Send message to the uart queue
//			sendMessage(send_str);

		}
	}
}
